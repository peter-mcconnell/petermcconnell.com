<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Peter McConnell :: Ponderings from a Linux Systems engineer</title>
    <link>https://www.petermcconnell.com/tags/python/</link>
    <description>Recent content in Python on Peter McConnell :: Ponderings from a Linux Systems engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Peter McConnell 2023</copyright>
    <lastBuildDate>Thu, 05 Jan 2023 16:51:58 +0000</lastBuildDate><atom:link href="https://www.petermcconnell.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python debugging</title>
      <link>https://www.petermcconnell.com/posts/python_debugging/</link>
      <pubDate>Thu, 05 Jan 2023 16:51:58 +0000</pubDate>
      
      <guid>https://www.petermcconnell.com/posts/python_debugging/</guid>
      <description>the &amp;lsquo;code&amp;rsquo; for this article can be found here: https://github.com/peter-mcconnell/petermcconnell.com/blob/main/assets/dummy/pydebug/main.py
debugging Python - the context This is the flow I take when faced with a new Python codebase. I often find myself having to debug codebases I&amp;rsquo;ve never seen before which has forced me to become very comfortable being lost in code and to develop some patterns that help me find my way. This is what I&amp;rsquo;m sharing with you today.</description>
      <content>&lt;p&gt;&lt;em&gt;the &amp;lsquo;code&amp;rsquo; for this article can be found here: &lt;a href=&#34;https://github.com/peter-mcconnell/petermcconnell.com/blob/main/assets/dummy/pydebug/main.py&#34;&gt;https://github.com/peter-mcconnell/petermcconnell.com/blob/main/assets/dummy/pydebug/main.py&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;debugging-python---the-context&#34;&gt;debugging Python - the context&lt;/h2&gt;
&lt;p&gt;This is the flow I take when faced with a new Python codebase. I often find myself having to debug codebases I&amp;rsquo;ve never seen before which has forced me to become very comfortable being lost in code and to develop some patterns that help me find my way. This is what I&amp;rsquo;m sharing with you today.&lt;/p&gt;
&lt;p&gt;I should note that I live in terminals - constantly connecting to servers, containers, colleagues machines, my own homelab etc. To compound this fact my editor of choice also lives in the terminal (Neovim). For that reason &lt;strong&gt;this guide is TERMINAL based&lt;/strong&gt; and as such does not include IDE-based debugging flows (which are solid from what I&amp;rsquo;ve seen).&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-requirements&#34;&gt;what are the requirements?&lt;/h2&gt;
&lt;p&gt;The debugger of choice (for me) is &lt;code&gt;ipdb&lt;/code&gt;. The reasons for this are at the end of the article.&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;ipdb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pip3 install --user ipdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll also need to gather information from the &lt;code&gt;refining scope&lt;/code&gt; section below.&lt;/p&gt;
&lt;h2 id=&#34;refining-scope&#34;&gt;refining scope&lt;/h2&gt;
&lt;p&gt;Often (my own usecase) my Python debugging story typically starts with: &amp;ldquo;This app is broken. It&amp;rsquo;s doing X&amp;rdquo; which tells me very little about what&amp;rsquo;s wrong and where to look. My first objective is to make the size of the problem statement as small / tight as possible. To do so, before I&amp;rsquo;ve looked at any code I try to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;validate that it appears to be an issue with the code and categorise it
&lt;ul&gt;
&lt;li&gt;perf issue&lt;/li&gt;
&lt;li&gt;logic issue&lt;/li&gt;
&lt;li&gt;flakiness&lt;/li&gt;
&lt;li&gt;dependency issue&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;identify which version of that app I need to debug &amp;amp; where I can get it&lt;/li&gt;
&lt;li&gt;identify which part of the codebase (file location, method, line)&lt;/li&gt;
&lt;li&gt;identify required inputs (method arguments, environment variables, third party sources etc)&lt;/li&gt;
&lt;li&gt;understand what has been tried already to fix the problem&lt;/li&gt;
&lt;li&gt;identify stakeholders, urgency etc &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This serves a few purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensure I can reproduce the bug&lt;/li&gt;
&lt;li&gt;reduce the scope of things that I need to look at&lt;/li&gt;
&lt;li&gt;help me understand the business logic / expected results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point I should have the confidence to know that the problem requires debugging.&lt;/p&gt;
&lt;h2 id=&#34;example-application&#34;&gt;example application&lt;/h2&gt;
&lt;p&gt;To get started create the following file. This is the simplest possible example I could create so as to keep signal/noise ratio in favour of the actual debugging steps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# main.py&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doubleit&lt;/span&gt;(val):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 2: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 4: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 8: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use this simple example for our debugging.&lt;/p&gt;
&lt;h2 id=&#34;using-ipdb&#34;&gt;using ipdb&lt;/h2&gt;
&lt;p&gt;From the information gathered earlier lets imagine the outputs were that the program above is spitting out the wrong values. We expect the &lt;code&gt;doubleit&lt;/code&gt; lines to show their values being doubled but instead they seem to be trebled (yes, it&amp;rsquo;s obvious why, but imagine this is a very large program and you don&amp;rsquo;t know why the output is what it is).&lt;/p&gt;
&lt;p&gt;With that information to hand we can look for the &lt;code&gt;doubleit&lt;/code&gt; method and add set some breakpoints so that we can explore the program as it&amp;rsquo;s running to understand the state:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# main.py&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doubleit&lt;/span&gt;(val):
    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ipdb       &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; added this line&lt;/span&gt;
    ipdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_trace()  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; added this line&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 2: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 4: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 8: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, doubleit(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can continue to add &lt;code&gt;ipdb.set_trace()&lt;/code&gt; points throughout our code. Generally speaking when I am running this for the first time I&amp;rsquo;ll tend to just drop one or two points in the codebase that I know are going to be in the path, with the expectation that I&amp;rsquo;ll manually step through the execution to learn how it flows. When we&amp;rsquo;ve added all of the breakpoints that we need we can instruct the program to run with &lt;code&gt;python main.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ python main.py
&amp;gt; /home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/pydebug/main.py&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;doubleit&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;     ipdb.set_trace&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val * &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;

ipdb&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ve ran our program with an attached debugger and it has paused execution at the breakpoint we set. We can run &lt;code&gt;args&lt;/code&gt; to see which arguments where passed to the method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&amp;gt; /home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/pydebug/main.py&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;doubleit&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;     ipdb.set_trace&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val * &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;

ipdb&amp;gt; args
val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in this point in the program we&amp;rsquo;re in the &lt;code&gt;doubleit&lt;/code&gt; method when it was invoked with a &lt;code&gt;val&lt;/code&gt; value of &lt;code&gt;2&lt;/code&gt;. We can print this and other variables using &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; p val
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or just the variable name on its own:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; val
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even call methods from this point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To walk over the execution we can press &lt;code&gt;n&lt;/code&gt; to go to the next point of execution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
ipdb&amp;gt; n
--Return--
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&amp;gt; /home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/pydebug/main.py&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;doubleit&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;     ipdb.set_trace&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val * &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and view the backtrace with &lt;code&gt;bt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; bt
  /home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/pydebug/main.py&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 2: %d&amp;#34;&lt;/span&gt;, doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 4: %d&amp;#34;&lt;/span&gt;, doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&amp;gt; /home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/pydebug/main.py&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;doubleit&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;     ipdb.set_trace&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val * &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To view the code around the current point of execution just press &lt;code&gt;l&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# main.py&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; def doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;val&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;     import ipdb
      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;     ipdb.set_trace&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
----&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val * &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
      &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
      &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 2: %d&amp;#34;&lt;/span&gt;, doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 4: %d&amp;#34;&lt;/span&gt;, doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
     &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doubleit 8: %d&amp;#34;&lt;/span&gt;, doubleit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which of course shows our very hard to find logic error, &lt;code&gt;* 3&lt;/code&gt; instead of &lt;code&gt;* 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: you can also set breakpoints in the stdlib functions (paths will vary depending on your setup):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ipdb&amp;gt; b /home/pete/.local/lib/python3.10/site-packages/requests/api.py:14
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; at /home/pete/.local/lib/python3.10/site-packages/requests/api.py:14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;debug-flow&#34;&gt;debug flow&lt;/h2&gt;
&lt;p&gt;Using the commands above I can begin my cyclic process of narrowing in on the fix:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;repro -&amp;gt; explore -&amp;gt; understand -&amp;gt; tweak -&amp;gt; repeat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More often than not this means I only need to understand a very small part of the application and can ignore code that isn&amp;rsquo;t relevant to the immediate issue.&lt;/p&gt;
&lt;p&gt;At a more detailed level this process looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(repro) write a test that triggers the bug in as simple terms as I can express&lt;/li&gt;
&lt;li&gt;(explore) set breakpoints&lt;/li&gt;
&lt;li&gt;(explore) run &lt;code&gt;pytest&lt;/code&gt; with the &lt;code&gt;-s&lt;/code&gt; flag so that I can interact with &lt;code&gt;ipdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(explore) use &lt;code&gt;args&lt;/code&gt; to check the arguments for the method that I&amp;rsquo;m in&lt;/li&gt;
&lt;li&gt;(explore) print surrounding variable values&lt;/li&gt;
&lt;li&gt;(explore) ensure the state of the program makes sense for my current breakpoint. If not, I need an earlier breakpoint. If so, continue with &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(explore) repeat these steps until I&amp;rsquo;ve reached the point that the program is in a seemingly erroneous state
&lt;ul&gt;
&lt;li&gt;(understand) it&amp;rsquo;s at this stage I&amp;rsquo;ll take time to properly read the surrounding code and experiment with variable values to see if I can get the program to act in the expected manner&lt;/li&gt;
&lt;li&gt;(understand) depending on the category of bug I&amp;rsquo;ll look for algorithmic complexity issues, stack overflow issues, parameter edgecases, logging quality, randomness factors etc. This is when the editor setup shines. see neovim section&lt;/li&gt;
&lt;li&gt;(tweak) I&amp;rsquo;ll make minor adjustments to the code which I believe will nudge the program into the right place&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I&amp;rsquo;m happy that my small tweaks are having the desired effect I&amp;rsquo;ll perform some tidy ups and look for opportunities to harden the code with type checking / improved logging / more tests.&lt;/p&gt;
&lt;h2 id=&#34;neovim&#34;&gt;neovim&lt;/h2&gt;
&lt;p&gt;This section describes my &lt;code&gt;neovim&lt;/code&gt; configuration for Python debugging at a high level. In short my debugging / code exploration flow boils down to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;telescope&lt;/code&gt; &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;https://github.com/nvim-telescope/telescope.nvim&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;allows me to &lt;code&gt;ctrl + f&lt;/code&gt; scan directories for files&lt;/li&gt;
&lt;li&gt;allows me to set up keybindings for scanning any common directories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coc&lt;/code&gt; &lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;https://github.com/neoclide/coc.nvim&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;code complete in all of the languages I need&lt;/li&gt;
&lt;li&gt;function descriptions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gd&lt;/code&gt; - default vim keybinding for go-to-definition. Jumps me into a function that I&amp;rsquo;m wanting to understand&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + o&lt;/code&gt; / &lt;code&gt;ctrl + i&lt;/code&gt; - default vim keybindings for go to last / next jump point. Really useful as I&amp;rsquo;m scanning code - I can keep jumping through definitions with &lt;code&gt;gd&lt;/code&gt; then &lt;code&gt;ctrl + o&lt;/code&gt; my way back / &lt;code&gt;ctrl + i&lt;/code&gt; my way back down as I&amp;rsquo;m trying to build an understanding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see my full Neovim config here: &lt;a href=&#34;https://github.com/peter-mcconnell/.dotfiles/blob/master/config/nvim/init.vim&#34;&gt;https://github.com/peter-mcconnell/.dotfiles/blob/master/config/nvim/init.vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;p&gt;The example above is extremely trivial - where &lt;code&gt;ipdb&lt;/code&gt; and it&amp;rsquo;s ilk shine are on complex usecases where you may not even know what methods are between the input and output, such as debugging the stdlib. Just this week I used &lt;code&gt;ipdb&lt;/code&gt; to identify why a codebase long forgotten was throwing an obscure error for a given dataset. By using &lt;code&gt;ipdb&lt;/code&gt; I reproduced the scenario and just before the point at which I knew it would error created a break point that allowed me to inspect program state and better understand the conditions leading to the error, resulting in a quick patch.&lt;/p&gt;
&lt;h2 id=&#34;why-not-pdb&#34;&gt;why not pdb?&lt;/h2&gt;
&lt;p&gt;Bells and whistles; I like that ipdb has better color support and tab completion. You could absolutely get the same results with &lt;code&gt;pdb&lt;/code&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Perf engineering with Python 3.12</title>
      <link>https://www.petermcconnell.com/posts/perf_eng_with_py12/</link>
      <pubDate>Mon, 26 Dec 2022 22:54:29 +0000</pubDate>
      
      <guid>https://www.petermcconnell.com/posts/perf_eng_with_py12/</guid>
      <description>overview 3.12 brings perf profiling! In this article we take a look at how the new perf profiling support helps reduce our dummy Python script from 36 seconds to 0.8 seconds. We&amp;rsquo;ll introduce the Linux tool perf and also FlameGraph.pl, look at some disassembly and go bug hunting. You can view the code for this article here: https://github.com/peter-mcconnell/petermcconnell.com/tree/main/assets/dummy/perf_py_proj
Take a second to go check out https://docs.python.org/3.12/howto/perf_profiling.html and indeed the changelog at https://www.</description>
      <content>&lt;h2 id=&#34;overview&#34;&gt;overview&lt;/h2&gt;
&lt;p&gt;3.12 brings perf profiling! In this article we take a look at how the new perf
profiling support helps reduce our dummy Python script from 36 seconds to 0.8
seconds. We&amp;rsquo;ll introduce the Linux tool &lt;code&gt;perf&lt;/code&gt; and also &lt;code&gt;FlameGraph.pl&lt;/code&gt;, look
at some disassembly and go bug hunting. You can view the code for this article
here: &lt;a href=&#34;https://github.com/peter-mcconnell/petermcconnell.com/tree/main/assets/dummy/perf_py_proj&#34;&gt;https://github.com/peter-mcconnell/petermcconnell.com/tree/main/assets/dummy/perf_py_proj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Take a second to go check out &lt;a href=&#34;https://docs.python.org/3.12/howto/perf_profiling.html&#34;&gt;https://docs.python.org/3.12/howto/perf_profiling.html&lt;/a&gt; and indeed the changelog at &lt;a href=&#34;https://www.python.org/downloads/release/python-3120a3/&#34;&gt;https://www.python.org/downloads/release/python-3120a3/&lt;/a&gt;. The important part (for this post) from these links is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Linux perf profiler is a very powerful tool that allows you to profile and obtain information about the performance of your application. perf also has a very vibrant ecosystem of tools that aid with the analysis of the data that it produces.&lt;/p&gt;
&lt;p&gt;The main problem with using the perf profiler with Python applications is that perf only allows to get information about native symbols, this is, the names of the functions and procedures written in C. This means that the names and file names of the Python functions in your code will not appear in the output of the perf.&lt;/p&gt;
&lt;p&gt;Since Python 3.12, the interpreter can run in a special mode that allows Python functions to appear in the output of the perf profiler. When this mode is enabled, the interpreter will interpose a small piece of code compiled on the fly before the execution of every Python function and it will teach perf the relationship between this piece of code and the associated Python function using perf map files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;writing-a-bad-program&#34;&gt;writing a &amp;ldquo;bad&amp;rdquo; program&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m excited to try this, so lets get going. Firstly lets create a python script for us to profile. I&amp;rsquo;m doing this before installing Python 3.12 as I want to create a FlameGraph of how this process looks in 3.10 verses 3.12. Here we have a script that attempts to perform lookups against a large list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_dummy&lt;/span&gt;(numbers):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; findme &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; findme &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; numbers:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;, findme)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;missed&amp;#34;&lt;/span&gt;, findme)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# create a large sized input to show off inefficiency&lt;/span&gt;
    numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;20000000&lt;/span&gt;)]

    start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()  &lt;span style=&#34;color:#75715e&#34;&gt;# get the current time [start]&lt;/span&gt;
    run_dummy(numbers)  &lt;span style=&#34;color:#75715e&#34;&gt;# run our inefficient method&lt;/span&gt;
    end_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()  &lt;span style=&#34;color:#75715e&#34;&gt;# get the current time [end]&lt;/span&gt;

    duration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start_time  &lt;span style=&#34;color:#75715e&#34;&gt;# Calculate the duration&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Duration: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;duration&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; seconds&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Print the duration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this I get the following result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;python3.10 assets/dummy/perf_py_proj/before.py
...
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99992&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99993&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99994&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99995&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99996&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99997&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99998&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99999&lt;/span&gt;
Duration: 36.06884431838989 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;36 seconds is bad enough for us to pick up a reasonable amount of samples.&lt;/p&gt;
&lt;h2 id=&#34;flamegraphs&#34;&gt;flamegraphs!&lt;/h2&gt;
&lt;p&gt;Now we can create our &lt;a href=&#34;https://github.com/brendangregg/FlameGraph&#34;&gt;FlameGraph&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# record profile to &amp;#34;perf.data&amp;#34; file (default output)&lt;/span&gt;
perf record -F &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; -g -- python3.10 assets/dummy/perf_py_proj/before.py
&lt;span style=&#34;color:#75715e&#34;&gt;# read perf.data (created above) and display trace output&lt;/span&gt;
perf script &amp;gt; out.perf
&lt;span style=&#34;color:#75715e&#34;&gt;# fold stack samples into single lines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# here I reference ~/FlameGraph/ - you can get this from https://github.com/brendangregg/FlameGraph&lt;/span&gt;
~/FlameGraph/stackcollapse-perf.pl out.perf &amp;gt; out.folded
&lt;span style=&#34;color:#75715e&#34;&gt;# generate flamegraph&lt;/span&gt;
~/FlameGraph/flamegraph.pl out.folded &amp;gt; ./assets/perf_example_python3.10.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a nice SVG that visualises the traces:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_example_python3.10.svg&#34; alt=&#34;python 3.10 perf flamegraph&#34; title=&#34;python 3.10 perf flamegraph&#34;&gt;&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t useful &amp;hellip; I can see most of the time was spent in &amp;ldquo;new_keys_object.lto_priv.0&amp;rdquo; but that is meaningless in the context of the code.&lt;/p&gt;
&lt;h2 id=&#34;time-for-python-312&#34;&gt;time for Python 3.12&amp;hellip;&lt;/h2&gt;
&lt;p&gt;First I need to install it - the steps for this vary depending on OS - follow the build instructions here for your environment: &lt;a href=&#34;https://github.com/python/cpython/tree/v3.12.0a3#build-instructions&#34;&gt;https://github.com/python/cpython/tree/v3.12.0a3#build-instructions&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for me on ubuntu:22.04&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ensure I have python3-dbg installed&lt;/span&gt;
sudo apt-get install python3-dbg

&lt;span style=&#34;color:#75715e&#34;&gt;# build python&lt;/span&gt;
export CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer&amp;#34;&lt;/span&gt;
./configure --enable-optimizations
make
make test
sudo make install
unset CFLAGS

&lt;span style=&#34;color:#75715e&#34;&gt;# after this I reset my systems python3 symlink to 3.10 as 3.12 isn&amp;#39;t yet stable&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# for testing python3.12 I&amp;#39;ll call &amp;#34;python3.12&amp;#34; instead of &amp;#34;python3&amp;#34;&lt;/span&gt;
ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that installed I first need to enable perf support. This is detailed in &lt;a href=&#34;https://docs.python.org/3.12/howto/perf_profiling.html&#34;&gt;https://docs.python.org/3.12/howto/perf_profiling.html&lt;/a&gt; and there are three options: 1) an environment variable, 2) an -X option or 3) dynamically using &lt;code&gt;sys&lt;/code&gt;. I&amp;rsquo;ll go for the environment variable approach as I don&amp;rsquo;t mind &lt;em&gt;everything&lt;/em&gt; being profiled for a small script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export PYTHONPERFSUPPORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we simply repeat the process above using the &lt;code&gt;python3.12&lt;/code&gt; binary instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# record profile to &amp;#34;perf.data&amp;#34; file (default output)&lt;/span&gt;
perf record -F &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; -g -- python3.12 assets/dummy/perf_py_proj/before.py
&lt;span style=&#34;color:#75715e&#34;&gt;# read perf.data (created above) and display trace output&lt;/span&gt;
perf script &amp;gt; out.perf
&lt;span style=&#34;color:#75715e&#34;&gt;# fold stack samples into single lines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# here I reference ~/FlameGraph/ - you can get this from https://github.com/brendangregg/FlameGraph&lt;/span&gt;
~/FlameGraph/stackcollapse-perf.pl out.perf &amp;gt; out.folded
&lt;span style=&#34;color:#75715e&#34;&gt;# generate flamegraph&lt;/span&gt;
~/FlameGraph/flamegraph.pl out.folded &amp;gt; ./assets/perf_example_python3.12.before.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we&amp;rsquo;ll take a peek at the report with &lt;code&gt;perf report -g -i perf.data&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_report.png&#34; alt=&#34;python 3.12 perf report output&#34; title=&#34;python 3.12 perf report&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! We can see our Python function names and script names!&lt;/p&gt;
&lt;p&gt;Now we can take a look at the updated SVG that visualises the traces with Python 3.12:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_example_python3.12.before.svg&#34; alt=&#34;python 3.12 perf flamegraph&#34; title=&#34;python 3.12 perf flamegraph&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is already looking much more useful. We see the majority of the time is being spent doing comparisons and in the list_contains method. We can also see the specific file &lt;code&gt;before.py&lt;/code&gt; and method &lt;code&gt;run_dummy&lt;/code&gt; that is calling it.&lt;/p&gt;
&lt;h2 id=&#34;investigation-time--the-fix&#34;&gt;investigation time / the fix&lt;/h2&gt;
&lt;p&gt;Now that we know where in our code the problem is, we can take a look at the source code in CPython to see why the &lt;code&gt;list_contains&lt;/code&gt; method would be so slow: &lt;a href=&#34;https://github.com/python/cpython/blob/199507b81a302ea19f93593965b1e5088195a6c5/Objects/listobject.c#L440&#34;&gt;https://github.com/python/cpython/blob/199507b81a302ea19f93593965b1e5088195a6c5/Objects/listobject.c#L440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note: you may not always have access to the source code - in circumstances such as this you can view the disassembly in perf report directly to get some idea of what&amp;rsquo;s going on. I&amp;rsquo;ll add a quick section at the end showing how this looks&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// I found this by going to https://github.com/python/cpython/ and searching for &amp;#34;list_contains&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;list_contains&lt;/span&gt;(PyListObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;el)
{
    PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;item;
    Py_ssize_t i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cmp;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; cmp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Py_SIZE(a); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PyList_GET_ITEM(a, i);
        Py_INCREF(item);
        cmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PyObject_RichCompareBool(item, el, Py_EQ);
        Py_DECREF(item);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cmp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nasty&amp;hellip; looking at this code I can see that each time it is invoked it iterates over the array and performs a comparison against each item. That&amp;rsquo;s far from ideal for our usecase, so lets go back to the Python code we wrote. Our Flamegraph shows us that the problem is in our &lt;code&gt;run_dummy&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_dummy&lt;/span&gt;(numbers):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; findme &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; findme &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; numbers:  &lt;span style=&#34;color:#75715e&#34;&gt;#  &amp;lt;- this is what triggers list_contains&lt;/span&gt;
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;, findme)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;missed&amp;#34;&lt;/span&gt;, findme)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can&amp;rsquo;t really change that line as it is doing what we want it to do - identifying if an integer is in &lt;code&gt;numbers&lt;/code&gt;. Perhaps we can change the &lt;code&gt;numbers&lt;/code&gt; data type to one better suited to lookups. In our existing code we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;20000000&lt;/span&gt;)]

    start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()  &lt;span style=&#34;color:#75715e&#34;&gt;# get the current time [start]&lt;/span&gt;
    run_dummy(numbers)  &lt;span style=&#34;color:#75715e&#34;&gt;# run our inefficient method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we used a LIST data type for our &amp;ldquo;numbers&amp;rdquo;, which under the hood (in CPython) is implemented as dynamically-sized arrays and as such are nowhere near as efficient (O(N)) as the likes of a Hashtable for looking up an item (which is O(1)). A SET on the other hand (another Python data type) is implemented as a Hashtable and would give us the fast lookup we&amp;rsquo;re looking for. Lets change the data type in our Python code and see what the impact is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# we&amp;#39;ll just change this line, casting numbers to a set before running run_dummy&lt;/span&gt;
    run_dummy(set(numbers))  &lt;span style=&#34;color:#75715e&#34;&gt;# passing a set() for fast lookups&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can repeat the steps as above to generate our new flamegraph:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# record profile to &amp;#34;perf.data&amp;#34; file (default output)&lt;/span&gt;
perf record -F &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; -g -- python3.12 assets/dummy/perf_py_proj/after.py
...
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99998&lt;/span&gt;
found &lt;span style=&#34;color:#ae81ff&#34;&gt;99999&lt;/span&gt;
Duration: 0.8350753784179688 seconds
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; perf record: Woken up &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; times to write data &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; perf record: Captured and wrote 0.039 MB perf.data &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt; samples&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Already we can see that things have massively improved. Where previously this was taking 36 seconds to run it is now taking 0.8 seconds! Lets continue creating our flamegraph for the new improved code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# read perf.data (created above) and display trace output&lt;/span&gt;
perf script &amp;gt; out.perf
&lt;span style=&#34;color:#75715e&#34;&gt;# fold stack samples into single lines&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# here I reference ~/FlameGraph/ - you can get this from https://github.com/brendangregg/FlameGraph&lt;/span&gt;
~/FlameGraph/stackcollapse-perf.pl out.perf &amp;gt; out.folded
&lt;span style=&#34;color:#75715e&#34;&gt;# generate flamegraph&lt;/span&gt;
~/FlameGraph/flamegraph.pl out.folded &amp;gt; ./assets/perf_example_python3.12.after.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_example_python3.12.after.svg&#34; alt=&#34;python 3.12 perf flamegraph improved&#34; title=&#34;python 3.12 perf flamegraph improved&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a much healthier looking Flamegraph and our application is now much faster as a result. The perf profiling support in Python 3.12 brings a tremendously useful tool to software engineers that want to deliver fast programs and I&amp;rsquo;m excited to see the impact this will have on the language.&lt;/p&gt;
&lt;h2 id=&#34;bonus-round-what-to-do-when-you-cant-access-the-source-code&#34;&gt;bonus round: what to do when you can&amp;rsquo;t access the source code?&lt;/h2&gt;
&lt;p&gt;Sometimes you don&amp;rsquo;t have access to the underlying code which can make trying to understand what&amp;rsquo;s going on much more difficult. Thankfully &lt;code&gt;perf report&lt;/code&gt; allows us to view the dissassembled code which can help paint a picture of what the machine is actually doing. This is a reasonable first place to look - I tend to prefer the source code if I can get hold of it as it allows me to &lt;code&gt;git blame&lt;/code&gt; / view the associated commits and PRs. To view this you can do the following:&lt;/p&gt;
&lt;p&gt;Open the perf report and select the line we&amp;rsquo;re interested in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this assumes we have already ran &amp;#39;perf record&amp;#39; to generate perf.data ...&lt;/span&gt;
perf report -g -i perf.data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_report_dis.1.png&#34; alt=&#34;perf report dissassembly&#34; title=&#34;perf report dissassembly&#34;&gt;&lt;/p&gt;
&lt;p&gt;Press enter and choose the annotate option:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_report_dis.2.png&#34; alt=&#34;perf report dissassembly&#34; title=&#34;perf report dissassembly&#34;&gt;&lt;/p&gt;
&lt;p&gt;Behold! Here we can see both the C code and the machine instructions. Super useful! You can compare the screenshot below against the code snippet we&amp;rsquo;re interested in: &lt;a href=&#34;https://github.com/python/cpython/blob/199507b81a302ea19f93593965b1e5088195a6c5/Objects/listobject.c#L440&#34;&gt;https://github.com/python/cpython/blob/199507b81a302ea19f93593965b1e5088195a6c5/Objects/listobject.c#L440&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/master/assets/perf_report_dis.3.png&#34; alt=&#34;perf report dissassembly&#34; title=&#34;perf report dissassembly&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommended-reading&#34;&gt;recommended reading&lt;/h2&gt;
&lt;p&gt;If this article has given you a taste for performance engineering, I can recommend the following Systems Performance book:&lt;/p&gt;


&lt;a href=&#34;https://www.amazon.com/Systems-Performance-Brendan-Gregg/dp/0136820158?crid=2J7NSUPP1LBQ2&amp;keywords=systems+performance+enterprise+and+the+cloud&amp;qid=1672315747&amp;sprefix=systems+performance%2Caps%2C167&amp;sr=8-1&amp;linkCode=li2&amp;tag=mobile052c67f-20&amp;linkId=042c48313bcd6eae20ae98499600e515&amp;language=en_US&amp;ref_=as_li_ss_il&#34; target=&#34;_blank&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;140&#34; src=&#34;https://m.media-amazon.com/images/W/WEBP_402378-T1/images/I/51Drvdub7TL._SX646_BO1,204,203,200_.jpg&#34; &gt;&lt;/a&gt;&lt;img src=&#34;https://ir-na.amazon-adsystem.com/e/ir?t=mobile052c67f-20&amp;language=en_US&amp;l=li2&amp;o=1&amp;a=0136820158&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;


</content>
    </item>
    
    <item>
      <title>chatGPT - building an automated database testing tool</title>
      <link>https://www.petermcconnell.com/posts/ai_db_testing/</link>
      <pubDate>Thu, 08 Dec 2022 11:41:50 +0000</pubDate>
      
      <guid>https://www.petermcconnell.com/posts/ai_db_testing/</guid>
      <description>Creating an automated database testing tool with ChatGPT Last night I thought I&amp;rsquo;d try to get ChatGPT to make an automated database testing tool and the results were quite promising.
In conclusion, with guidance, it was able to build a project from scratch that ran a python script and postgres database. It generated some random schema and values for the randomly generated tables. It provided a Python script which would introspect the database and execute queries against it.</description>
      <content>&lt;h2 id=&#34;creating-an-automated-database-testing-tool-with-chatgpt&#34;&gt;Creating an automated database testing tool with ChatGPT&lt;/h2&gt;
&lt;p&gt;Last night I thought I&amp;rsquo;d try to get ChatGPT to make an automated database
testing tool and the results were quite promising.&lt;/p&gt;
&lt;p&gt;In conclusion, with guidance, it was able to build a project from scratch that
ran a python script and postgres database. It generated some random schema and
values for the randomly generated tables. It provided a Python script which
would introspect the database and execute queries against it.&lt;/p&gt;
&lt;p&gt;Did it all work out of the box? No. There are some bugs to fix in the python
script it generated. However the effort to go in and fix those is not high and
certainly the whole end-to-end process is cheaper, time-wise, compared to
starting from scratch.&lt;/p&gt;
&lt;p&gt;I found that the bugs it encountered were largely due to my lack of clarity or
ordering of questions posed to it. It was quite capable of fixing its own
mistakes / updating the existing code to match the new requirements when
requested to do so.&lt;/p&gt;
&lt;p&gt;The only &lt;em&gt;real&lt;/em&gt; issue I encountered were general API errors that one would
expect of something so popular in an early preview state.&lt;/p&gt;
&lt;p&gt;I came away from this experiment viewing ChatGPT and whatever follows it as a
really useful development aide for those who already know how to program. It
helped me build a tool faster than I could have had I sat down to do it from
scratch. I don&amp;rsquo;t view it as a replacement for software engineers yet for two
main reasons - firstly: for non-trivial applications I suspect the person
feeding requirements into the system (or &amp;ldquo;prompt engineer&amp;rdquo;) needs to have a
reasonable idea of how to build software in the first place, so as to know how
to form requests and to correct mistakes / close gaps. secondly: the code being
generated isn&amp;rsquo;t always sound - without an experienced engineer reviewing and
taking ownership of whatever code is produced (ownership being important for
maintainence reasons) then there&amp;rsquo;s little guarantee that you will get what you
are hoping for.&lt;/p&gt;
&lt;p&gt;However; this is still very early days. Can the problems outlined be closed
further? Absolutely. Will this sort of tooling be &amp;ldquo;bad&amp;rdquo; for software
engineering as a whole, long-term? Perhaps. Personally I&amp;rsquo;m very excited to have
this tool in my arsenal - already it has allowed me to scaffold prototype
applications quickly. Would I use it for production code in a workplace? No
more or less than I would snippets from stackoverflow or it&amp;rsquo;s ilk. For now.&lt;/p&gt;
&lt;p&gt;Github repository: &lt;a href=&#34;https://github.com/peter-mcconnell/gpt_sql_test_generator&#34;&gt;https://github.com/peter-mcconnell/gpt_sql_test_generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/2.png&#34; alt=&#34;step 2&#34; title=&#34;step 2&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/3.png&#34; alt=&#34;step 3&#34; title=&#34;step 3&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/4.png&#34; alt=&#34;step 4&#34; title=&#34;step 4&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/5.png&#34; alt=&#34;step 5&#34; title=&#34;step 5&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/6.png&#34; alt=&#34;step 6&#34; title=&#34;step 6&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/7.png&#34; alt=&#34;step 7&#34; title=&#34;step 7&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/8.png&#34; alt=&#34;step 8&#34; title=&#34;step 8&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/9.png&#34; alt=&#34;step 9&#34; title=&#34;step 9&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/10.png&#34; alt=&#34;step 10&#34; title=&#34;step 10&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/11.png&#34; alt=&#34;step 11&#34; title=&#34;step 11&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/12.png&#34; alt=&#34;step 12&#34; title=&#34;step 12&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/13.png&#34; alt=&#34;step 13&#34; title=&#34;step 13&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/14.png&#34; alt=&#34;step 14&#34; title=&#34;step 14&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/15.png&#34; alt=&#34;step 15&#34; title=&#34;step 15&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/gpt_sql_test_generator/master/media/16.png&#34; alt=&#34;step 16&#34; title=&#34;step 16&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
