<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assembly on Peter McConnell</title>
    <link>https://www.petermcconnell.com/tags/assembly/</link>
    <description>Recent content in assembly on Peter McConnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Dec 2022 18:02:29 +0000</lastBuildDate><atom:link href="https://www.petermcconnell.com/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Your first time running perf (part 2) ...</title>
      <link>https://www.petermcconnell.com/posts/your_first_perf_part_2/</link>
      <pubDate>Mon, 26 Dec 2022 18:02:29 +0000</pubDate>
      
      <guid>https://www.petermcconnell.com/posts/your_first_perf_part_2/</guid>
      <description>In part 1 we seen the resulting machine instructions from our &amp;lsquo;curl https://www.google.com&amp;rsquo; command, but what did it tell us?
Let&amp;rsquo;s start with setting expectations - here we&amp;rsquo;re not doing perf analysis on something we think is broken or that needs improved. Curl spending 20% of it&amp;rsquo;s time on crypto for an HTTPS endpoint isn&amp;rsquo;t unexpected. The purpose of this article is just to guide you through what it is exactly that you&amp;rsquo;re looking at and how it may be useful.</description>
      <content>&lt;p&gt;In &lt;a href=&#34;https://www.petermcconnell.com/posts/your_first_perf/&#34;&gt;part 1&lt;/a&gt; we seen the resulting machine instructions from our &amp;lsquo;curl &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;&amp;rsquo; command, but what did it tell us?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with setting expectations - here we&amp;rsquo;re not doing perf analysis on something we think is broken or that needs improved. Curl spending 20% of it&amp;rsquo;s time on crypto for an HTTPS endpoint isn&amp;rsquo;t unexpected. The purpose of this article is just to guide you through what it is exactly that you&amp;rsquo;re looking at and how it may be useful.&lt;/p&gt;
&lt;p&gt;Here is the output that we got:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peter-mcconnell/petermcconnell.com/main/assets/perf_example3.png&#34; alt=&#34;shaking hands with the devil&#34; title=&#34;shaking hands with the devil&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking over this line by line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test    %rdi,%rdi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction tests the value in the %rdi register and sets the zero flag (ZF) in the processor&amp;rsquo;s flags register (%eflags) depending on the result. If the value in %rdi is zero, ZF will be set to 1. If the value in %rdi is non-zero, ZF will be set to 0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;je      1c20ae &amp;lt;OSSL_SELF_TEST_free@@OPENSSL_3.0.0+0x8e&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction is a conditional jump that will only be taken if the zero flag (ZF) in %eflags is set to 1. If ZF is 1, the instruction will jump to the address specified (in this case, 1c20ae). If ZF is 0, the instruction will be skipped and execution will continue with the next instruction in sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and     $0xfffffffffffff000,%r14
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction performs a bitwise AND operation between the immediate value 0xfffffffffffff000 and the value in the %r14 register, and stores the result in %r14. A bitwise AND operation sets each bit in the result to 1 if the corresponding bits in both operands are 1, and 0 otherwise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;or      %rax,%r14
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction performs a bitwise OR operation between the value in the %rax register and the value in the %r14 register, and stores the result in %r14. A bitwise OR operation sets each bit in the result to 1 if either of the corresponding bits in the operands is 1, and 0 otherwise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%r12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value at the memory location pointed to by %r12 into the %eax register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub     $0x1,%eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction subtracts the immediate value 0x1 from the value in the %eax register and stores the result in %eax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmp     %r13d,%eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction compares the values in the %r13d and %eax registers and sets the processor&amp;rsquo;s flags register (%eflags) depending on the result. The cmp instruction does not produce a result, but it updates the flags in %eflags that can be tested by subsequent conditional jump instructions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jle     1c20b8 &amp;lt;OSSL_SELF_TEST_free@@OPENSSL_3.0.0+0x98&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction is a conditional jump that will only be taken if the sign flag (SF) and the zero flag (ZF) in %eflags are both set to 1, or if the sign flag (SF) is set to 1 and the overflow flag (OF) is set to 0. If these conditions are met, the instruction will jump to the address specified (in this case, 1c20b8). If the conditions are not met, the instruction will be skipped and execution will continue with the next instruction in sequence.&lt;/p&gt;
&lt;p&gt;The jle instruction stands for &amp;ldquo;jump if less than or equal&amp;rdquo;. It tests the values in the %eflags register to determine whether the value in the first operand (the source operand) is less than or equal to the value in the second operand (the destination operand). If the condition is true, the instruction will jump to the specified address. If the condition is false, the instruction will be skipped and execution will continue with the next instruction in sequence.&lt;/p&gt;
&lt;p&gt;The jle instruction is typically used in conjunction with a preceding cmp instruction, which compares the values in the source and destination operands and updates the flags in %eflags accordingly. The jle instruction can then test the values of the flags to determine whether to take the jump or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     $0x1,%ecx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the immediate value 0x1 into the %ecx register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     %rdi,%rdx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value in the %rdi register into the %rdx register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     %rdi,%rsi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value in the %rdi register into the %rsi register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     %rdi,%r8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value in the %rdi register into the %r8 register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     %rdi,%r9
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value in the %rdi register into the %r9 register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov     %rdi,%r10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This instruction moves the value in the %rdi register into the %r10 register&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
