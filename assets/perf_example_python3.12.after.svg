<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="902.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="885" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="885" > </text>
<g id="frames">
<g >
<title>_PyEval_EvalFrameDefault (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="661" width="881.8" height="15.0" fill="rgb(221,48,9)" rx="2" ry="2" />
<text  x="293.41" y="671.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>do_anonymous_page (478,865,833 samples, 8.31%)</title><rect x="906.3" y="501" width="98.1" height="15.0" fill="rgb(244,5,40)" rx="2" ry="2" />
<text  x="909.32" y="511.5" >do_anonymou..</text>
</g>
<g >
<title>__alloc_pages (43,467,669 samples, 0.75%)</title><rect x="525.4" y="421" width="8.9" height="15.0" fill="rgb(220,54,16)" rx="2" ry="2" />
<text  x="528.40" y="431.5" ></text>
</g>
<g >
<title>alloc_pages_vma (44,574,323 samples, 0.77%)</title><rect x="507.4" y="421" width="9.1" height="15.0" fill="rgb(236,94,47)" rx="2" ry="2" />
<text  x="510.37" y="431.5" ></text>
</g>
<g >
<title>all (5,763,165,608 samples, 100%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(206,9,50)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>handle_pte_fault (522,542,282 samples, 9.07%)</title><rect x="897.4" y="517" width="107.0" height="15.0" fill="rgb(237,163,53)" rx="2" ry="2" />
<text  x="900.38" y="527.5" >handle_pte_fa..</text>
</g>
<g >
<title>__handle_mm_fault (696,622,860 samples, 12.09%)</title><rect x="861.7" y="533" width="142.7" height="15.0" fill="rgb(245,187,19)" rx="2" ry="2" />
<text  x="864.73" y="543.5" >__handle_mm_fault</text>
</g>
<g >
<title>do_user_addr_fault (43,533,854 samples, 0.76%)</title><rect x="563.2" y="565" width="9.0" height="15.0" fill="rgb(235,16,20)" rx="2" ry="2" />
<text  x="566.24" y="575.5" ></text>
</g>
<g >
<title>charge_memcg (43,465,334 samples, 0.75%)</title><rect x="906.3" y="469" width="8.9" height="15.0" fill="rgb(210,205,1)" rx="2" ry="2" />
<text  x="909.32" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_vma (43,467,669 samples, 0.75%)</title><rect x="525.4" y="437" width="8.9" height="15.0" fill="rgb(207,210,19)" rx="2" ry="2" />
<text  x="528.40" y="447.5" ></text>
</g>
<g >
<title>handle_pte_fault (91,319,187 samples, 1.58%)</title><rect x="525.4" y="469" width="18.7" height="15.0" fill="rgb(206,172,39)" rx="2" ry="2" />
<text  x="528.40" y="479.5" ></text>
</g>
<g >
<title>exc_page_fault (178,341,831 samples, 3.09%)</title><rect x="516.5" y="533" width="36.5" height="15.0" fill="rgb(245,192,39)" rx="2" ry="2" />
<text  x="519.49" y="543.5" >exc..</text>
</g>
<g >
<title>clear_page_rep (217,939,638 samples, 3.78%)</title><rect x="924.1" y="437" width="44.6" height="15.0" fill="rgb(212,150,37)" rx="2" ry="2" />
<text  x="927.13" y="447.5" >clea..</text>
</g>
<g >
<title>clear_page_rep (43,467,669 samples, 0.75%)</title><rect x="525.4" y="389" width="8.9" height="15.0" fill="rgb(239,159,3)" rx="2" ry="2" />
<text  x="528.40" y="399.5" ></text>
</g>
<g >
<title>remove_wait_queue (40,997,807 samples, 0.71%)</title><rect x="699.2" y="181" width="8.4" height="15.0" fill="rgb(241,195,30)" rx="2" ry="2" />
<text  x="702.21" y="191.5" ></text>
</g>
<g >
<title>PyMem_Free (41,538,008 samples, 0.72%)</title><rect x="770.8" y="469" width="8.5" height="15.0" fill="rgb(219,216,27)" rx="2" ry="2" />
<text  x="773.81" y="479.5" ></text>
</g>
<g >
<title>allocate_from_new_pool (88,897,466 samples, 1.54%)</title><rect x="498.3" y="549" width="18.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="501.29" y="559.5" ></text>
</g>
<g >
<title>__alloc_pages (261,466,681 samples, 4.54%)</title><rect x="924.1" y="469" width="53.6" height="15.0" fill="rgb(250,162,11)" rx="2" ry="2" />
<text  x="927.13" y="479.5" >__all..</text>
</g>
<g >
<title>ext4_dirty_inode (17,152,515 samples, 0.30%)</title><rect x="10.0" y="597" width="3.5" height="15.0" fill="rgb(228,176,40)" rx="2" ry="2" />
<text  x="13.01" y="607.5" ></text>
</g>
<g >
<title>[[vdso]] (308,712,121 samples, 5.36%)</title><rect x="707.6" y="405" width="63.2" height="15.0" fill="rgb(252,183,39)" rx="2" ry="2" />
<text  x="710.60" y="415.5" >[[vdso]]</text>
</g>
<g >
<title>jbd2_journal_stop (17,152,515 samples, 0.30%)</title><rect x="10.0" y="565" width="3.5" height="15.0" fill="rgb(237,177,43)" rx="2" ry="2" />
<text  x="13.01" y="575.5" ></text>
</g>
<g >
<title>generic_perform_write (17,152,515 samples, 0.30%)</title><rect x="10.0" y="661" width="3.5" height="15.0" fill="rgb(213,208,54)" rx="2" ry="2" />
<text  x="13.01" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="773" width="17.8" height="15.0" fill="rgb(217,48,30)" rx="2" ry="2" />
<text  x="1175.17" y="783.5" ></text>
</g>
<g >
<title>list_traverse (43,613,967 samples, 0.76%)</title><rect x="22.4" y="693" width="8.9" height="15.0" fill="rgb(240,53,39)" rx="2" ry="2" />
<text  x="25.41" y="703.5" ></text>
</g>
<g >
<title>method_vectorcall_NOARGS (444,834,933 samples, 7.72%)</title><rect x="616.5" y="485" width="91.1" height="15.0" fill="rgb(216,182,46)" rx="2" ry="2" />
<text  x="619.52" y="495.5" >method_vec..</text>
</g>
<g >
<title>method_vectorcall_O (308,712,121 samples, 5.36%)</title><rect x="707.6" y="469" width="63.2" height="15.0" fill="rgb(207,66,24)" rx="2" ry="2" />
<text  x="710.60" y="479.5" >method..</text>
</g>
<g >
<title>queue_work_on (42,449,103 samples, 0.74%)</title><rect x="637.2" y="133" width="8.7" height="15.0" fill="rgb(233,130,43)" rx="2" ry="2" />
<text  x="640.19" y="143.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (86,974,110 samples, 1.51%)</title><rect x="906.3" y="485" width="17.8" height="15.0" fill="rgb(227,16,7)" rx="2" ry="2" />
<text  x="909.32" y="495.5" ></text>
</g>
<g >
<title>py::run_dummy:/home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/perf_py_proj/after.py (1,108,994,214 samples, 19.24%)</title><rect x="581.1" y="629" width="227.0" height="15.0" fill="rgb(228,13,49)" rx="2" ry="2" />
<text  x="584.07" y="639.5" >py::run_dummy:/home/pete/go/sr..</text>
</g>
<g >
<title>__handle_mm_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="469" width="18.2" height="15.0" fill="rgb(205,33,25)" rx="2" ry="2" />
<text  x="501.29" y="479.5" ></text>
</g>
<g >
<title>exc_page_fault (827,477,054 samples, 14.36%)</title><rect x="843.8" y="581" width="169.5" height="15.0" fill="rgb(238,16,52)" rx="2" ry="2" />
<text  x="846.84" y="591.5" >exc_page_fault</text>
</g>
<g >
<title>PyDict_GetItemWithError (42,232,442 samples, 0.73%)</title><rect x="788.7" y="517" width="8.6" height="15.0" fill="rgb(217,153,20)" rx="2" ry="2" />
<text  x="791.70" y="527.5" ></text>
</g>
<g >
<title>PyFile_WriteObject (1,021,399,840 samples, 17.72%)</title><rect x="599.0" y="565" width="209.1" height="15.0" fill="rgb(227,39,40)" rx="2" ry="2" />
<text  x="602.01" y="575.5" >PyFile_WriteObject</text>
</g>
<g >
<title>set_update_internal (433,326,554 samples, 7.52%)</title><rect x="1022.2" y="613" width="88.7" height="15.0" fill="rgb(254,59,41)" rx="2" ry="2" />
<text  x="1025.17" y="623.5" >set_update..</text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (87,311,874 samples, 1.51%)</title><rect x="272.5" y="661" width="17.9" height="15.0" fill="rgb(216,88,20)" rx="2" ry="2" />
<text  x="275.53" y="671.5" ></text>
</g>
<g >
<title>_PyGC_CollectNoFail (917,130,237 samples, 15.91%)</title><rect x="102.6" y="741" width="187.8" height="15.0" fill="rgb(228,54,9)" rx="2" ry="2" />
<text  x="105.63" y="751.5" >_PyGC_CollectNoFail</text>
</g>
<g >
<title>__vm_munmap (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="757" width="17.8" height="15.0" fill="rgb(249,199,18)" rx="2" ry="2" />
<text  x="1175.17" y="767.5" ></text>
</g>
<g >
<title>method_vectorcall_O (444,834,933 samples, 7.72%)</title><rect x="616.5" y="389" width="91.1" height="15.0" fill="rgb(221,162,3)" rx="2" ry="2" />
<text  x="619.52" y="399.5" >method_vec..</text>
</g>
<g >
<title>file_tty_write.constprop.0 (343,913,127 samples, 5.97%)</title><rect x="637.2" y="229" width="70.4" height="15.0" fill="rgb(216,133,25)" rx="2" ry="2" />
<text  x="640.19" y="239.5" >file_tt..</text>
</g>
<g >
<title>run_eval_code_obj (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="709" width="881.8" height="15.0" fill="rgb(252,14,52)" rx="2" ry="2" />
<text  x="293.41" y="719.5" >run_eval_code_obj</text>
</g>
<g >
<title>PyLong_FromSsize_t (793,993,882 samples, 13.78%)</title><rect x="390.4" y="581" width="162.6" height="15.0" fill="rgb(227,136,6)" rx="2" ry="2" />
<text  x="393.44" y="591.5" >PyLong_FromSsize_t</text>
</g>
<g >
<title>lru_cache_add (86,891,890 samples, 1.51%)</title><rect x="986.6" y="469" width="17.8" height="15.0" fill="rgb(230,192,0)" rx="2" ry="2" />
<text  x="989.58" y="479.5" ></text>
</g>
<g >
<title>deduce_unreachable (435,193,207 samples, 7.55%)</title><rect x="13.5" y="709" width="89.1" height="15.0" fill="rgb(215,160,7)" rx="2" ry="2" />
<text  x="16.52" y="719.5" >deduce_unr..</text>
</g>
<g >
<title>charge_memcg (47,851,518 samples, 0.83%)</title><rect x="534.3" y="437" width="9.8" height="15.0" fill="rgb(248,8,23)" rx="2" ry="2" />
<text  x="537.30" y="447.5" ></text>
</g>
<g >
<title>[unknown] (17,194,754 samples, 0.30%)</title><rect x="10.0" y="821" width="3.5" height="15.0" fill="rgb(222,204,48)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>irqentry_exit (43,480,344 samples, 0.75%)</title><rect x="1004.4" y="565" width="8.9" height="15.0" fill="rgb(252,115,39)" rx="2" ry="2" />
<text  x="1007.37" y="575.5" ></text>
</g>
<g >
<title>py::&lt;listcomp&gt;:/home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/perf_py_proj/after.py (1,419,613,062 samples, 24.63%)</title><rect x="290.4" y="629" width="290.7" height="15.0" fill="rgb(217,175,35)" rx="2" ry="2" />
<text  x="293.41" y="639.5" >py::&lt;listcomp&gt;:/home/pete/go/src/github..</text>
</g>
<g >
<title>PyObject_GetAttr (87,594,374 samples, 1.52%)</title><rect x="581.1" y="565" width="17.9" height="15.0" fill="rgb(224,120,16)" rx="2" ry="2" />
<text  x="584.07" y="575.5" ></text>
</g>
<g >
<title>free_keys_object (523,938,727 samples, 9.09%)</title><rect x="183.1" y="693" width="107.3" height="15.0" fill="rgb(219,195,22)" rx="2" ry="2" />
<text  x="186.13" y="703.5" >free_keys_obj..</text>
</g>
<g >
<title>generic_write_end (17,152,515 samples, 0.30%)</title><rect x="10.0" y="629" width="3.5" height="15.0" fill="rgb(209,78,43)" rx="2" ry="2" />
<text  x="13.01" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="485" width="18.2" height="15.0" fill="rgb(234,70,18)" rx="2" ry="2" />
<text  x="501.29" y="495.5" ></text>
</g>
<g >
<title>gc_collect_main (917,130,237 samples, 15.91%)</title><rect x="102.6" y="725" width="187.8" height="15.0" fill="rgb(209,200,33)" rx="2" ry="2" />
<text  x="105.63" y="735.5" >gc_collect_main</text>
</g>
<g >
<title>llist_add_batch (49,638,246 samples, 0.86%)</title><rect x="689.0" y="37" width="10.2" height="15.0" fill="rgb(210,9,42)" rx="2" ry="2" />
<text  x="692.04" y="47.5" ></text>
</g>
<g >
<title>rcmd_af (386,060,449 samples, 6.70%)</title><rect x="628.6" y="357" width="79.0" height="15.0" fill="rgb(243,164,13)" rx="2" ry="2" />
<text  x="631.56" y="367.5" >rcmd_af</text>
</g>
<g >
<title>unmap_page_range (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="677" width="17.8" height="15.0" fill="rgb(249,30,10)" rx="2" ry="2" />
<text  x="1175.17" y="687.5" ></text>
</g>
<g >
<title>do_user_addr_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="501" width="18.2" height="15.0" fill="rgb(225,121,10)" rx="2" ry="2" />
<text  x="501.29" y="511.5" ></text>
</g>
<g >
<title>vfs_write (17,152,515 samples, 0.30%)</title><rect x="10.0" y="725" width="3.5" height="15.0" fill="rgb(217,158,3)" rx="2" ry="2" />
<text  x="13.01" y="735.5" ></text>
</g>
<g >
<title>pty_write (42,449,103 samples, 0.74%)</title><rect x="637.2" y="165" width="8.7" height="15.0" fill="rgb(251,208,8)" rx="2" ry="2" />
<text  x="640.19" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (87,311,874 samples, 1.51%)</title><rect x="272.5" y="645" width="17.9" height="15.0" fill="rgb(242,78,25)" rx="2" ry="2" />
<text  x="275.53" y="655.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (43,501,886 samples, 0.75%)</title><rect x="544.1" y="485" width="8.9" height="15.0" fill="rgb(208,187,29)" rx="2" ry="2" />
<text  x="547.10" y="495.5" ></text>
</g>
<g >
<title>do_user_addr_fault (783,996,710 samples, 13.60%)</title><rect x="843.8" y="565" width="160.6" height="15.0" fill="rgb(243,58,37)" rx="2" ry="2" />
<text  x="846.84" y="575.5" >do_user_addr_fault</text>
</g>
<g >
<title>ext4_file_write_iter (17,152,515 samples, 0.30%)</title><rect x="10.0" y="693" width="3.5" height="15.0" fill="rgb(223,155,1)" rx="2" ry="2" />
<text  x="13.01" y="703.5" ></text>
</g>
<g >
<title>method_get (44,560,813 samples, 0.77%)</title><rect x="589.9" y="533" width="9.1" height="15.0" fill="rgb(218,129,52)" rx="2" ry="2" />
<text  x="592.88" y="543.5" ></text>
</g>
<g >
<title>ext4_da_write_end (17,152,515 samples, 0.30%)</title><rect x="10.0" y="645" width="3.5" height="15.0" fill="rgb(241,193,29)" rx="2" ry="2" />
<text  x="13.01" y="655.5" ></text>
</g>
<g >
<title>unmap_vmas (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="709" width="17.8" height="15.0" fill="rgb(250,143,43)" rx="2" ry="2" />
<text  x="1175.17" y="719.5" ></text>
</g>
<g >
<title>PyObject_CallOneArg (880,636,974 samples, 15.28%)</title><rect x="599.0" y="549" width="180.3" height="15.0" fill="rgb(232,68,40)" rx="2" ry="2" />
<text  x="602.01" y="559.5" >PyObject_CallOneArg</text>
</g>
<g >
<title>PyBuffer_Release (58,774,484 samples, 1.02%)</title><rect x="616.5" y="357" width="12.1" height="15.0" fill="rgb(237,204,33)" rx="2" ry="2" />
<text  x="619.52" y="367.5" ></text>
</g>
<g >
<title>parse_qtd_backslash (308,712,121 samples, 5.36%)</title><rect x="707.6" y="421" width="63.2" height="15.0" fill="rgb(243,176,43)" rx="2" ry="2" />
<text  x="710.60" y="431.5" >parse_..</text>
</g>
<g >
<title>PyObject_Free (174,499,328 samples, 3.03%)</title><rect x="183.1" y="677" width="35.8" height="15.0" fill="rgb(249,213,15)" rx="2" ry="2" />
<text  x="186.13" y="687.5" >PyO..</text>
</g>
<g >
<title>iterate_groups (53,712,636 samples, 0.93%)</title><rect x="668.8" y="133" width="11.0" height="15.0" fill="rgb(206,77,14)" rx="2" ry="2" />
<text  x="671.82" y="143.5" ></text>
</g>
<g >
<title>meth_dealloc (52,695,059 samples, 0.91%)</title><rect x="797.3" y="549" width="10.8" height="15.0" fill="rgb(220,48,7)" rx="2" ry="2" />
<text  x="800.35" y="559.5" ></text>
</g>
<g >
<title>process_output_block (94,715,288 samples, 1.64%)</title><rect x="679.8" y="181" width="19.4" height="15.0" fill="rgb(244,191,8)" rx="2" ry="2" />
<text  x="682.81" y="191.5" ></text>
</g>
<g >
<title>tty_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="245" width="70.4" height="15.0" fill="rgb(247,209,29)" rx="2" ry="2" />
<text  x="640.19" y="255.5" >tty_write</text>
</g>
<g >
<title>queue_work_on (49,638,246 samples, 0.86%)</title><rect x="689.0" y="133" width="10.2" height="15.0" fill="rgb(245,72,4)" rx="2" ry="2" />
<text  x="692.04" y="143.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="661" width="17.8" height="15.0" fill="rgb(247,152,35)" rx="2" ry="2" />
<text  x="1175.17" y="671.5" ></text>
</g>
<g >
<title>n_tty_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="197" width="70.4" height="15.0" fill="rgb(229,122,5)" rx="2" ry="2" />
<text  x="640.19" y="207.5" >n_tty_w..</text>
</g>
<g >
<title>rmqueue (43,527,043 samples, 0.76%)</title><rect x="968.7" y="437" width="9.0" height="15.0" fill="rgb(216,229,11)" rx="2" ry="2" />
<text  x="971.75" y="447.5" ></text>
</g>
<g >
<title>do_anonymous_page (43,533,854 samples, 0.76%)</title><rect x="563.2" y="501" width="9.0" height="15.0" fill="rgb(211,160,51)" rx="2" ry="2" />
<text  x="566.24" y="511.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath.part.0 (40,997,807 samples, 0.71%)</title><rect x="699.2" y="133" width="8.4" height="15.0" fill="rgb(225,10,2)" rx="2" ry="2" />
<text  x="702.21" y="143.5" ></text>
</g>
<g >
<title>set_dealloc (299,282,120 samples, 5.19%)</title><rect x="1110.9" y="645" width="61.3" height="15.0" fill="rgb(252,96,35)" rx="2" ry="2" />
<text  x="1113.89" y="655.5" >set_de..</text>
</g>
<g >
<title>do_anonymous_page (91,319,187 samples, 1.58%)</title><rect x="525.4" y="453" width="18.7" height="15.0" fill="rgb(211,108,51)" rx="2" ry="2" />
<text  x="528.40" y="463.5" ></text>
</g>
<g >
<title>unmap_single_vma (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="693" width="17.8" height="15.0" fill="rgb(208,158,18)" rx="2" ry="2" />
<text  x="1175.17" y="703.5" ></text>
</g>
<g >
<title>PyObject_VectorcallMethod (444,834,933 samples, 7.72%)</title><rect x="616.5" y="405" width="91.1" height="15.0" fill="rgb(221,136,44)" rx="2" ry="2" />
<text  x="619.52" y="415.5" >PyObject_V..</text>
</g>
<g >
<title>__x64_sys_write (17,152,515 samples, 0.30%)</title><rect x="10.0" y="757" width="3.5" height="15.0" fill="rgb(236,41,7)" rx="2" ry="2" />
<text  x="13.01" y="767.5" ></text>
</g>
<g >
<title>unmap_region (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="725" width="17.8" height="15.0" fill="rgb(209,31,48)" rx="2" ry="2" />
<text  x="1175.17" y="735.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (43,481,873 samples, 0.75%)</title><rect x="1181.1" y="581" width="8.9" height="15.0" fill="rgb(218,94,16)" rx="2" ry="2" />
<text  x="1184.10" y="591.5" ></text>
</g>
<g >
<title>PyCMethod_New (43,033,561 samples, 0.75%)</title><rect x="581.1" y="533" width="8.8" height="15.0" fill="rgb(233,138,42)" rx="2" ry="2" />
<text  x="584.07" y="543.5" ></text>
</g>
<g >
<title>handle_mm_fault (783,996,710 samples, 13.60%)</title><rect x="843.8" y="549" width="160.6" height="15.0" fill="rgb(216,30,32)" rx="2" ry="2" />
<text  x="846.84" y="559.5" >handle_mm_fault</text>
</g>
<g >
<title>_raw_spin_lock (43,676,449 samples, 0.76%)</title><rect x="897.4" y="501" width="8.9" height="15.0" fill="rgb(221,208,44)" rx="2" ry="2" />
<text  x="900.38" y="511.5" ></text>
</g>
<g >
<title>ksys_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="293" width="70.4" height="15.0" fill="rgb(240,32,16)" rx="2" ry="2" />
<text  x="640.19" y="303.5" >ksys_wr..</text>
</g>
<g >
<title>asm_exc_page_fault (178,341,831 samples, 3.09%)</title><rect x="516.5" y="549" width="36.5" height="15.0" fill="rgb(217,184,42)" rx="2" ry="2" />
<text  x="519.49" y="559.5" >asm..</text>
</g>
<g >
<title>alloc_pages_vma (43,533,854 samples, 0.76%)</title><rect x="563.2" y="485" width="9.0" height="15.0" fill="rgb(215,14,13)" rx="2" ry="2" />
<text  x="566.24" y="495.5" ></text>
</g>
<g >
<title>get_page_from_freelist (44,574,323 samples, 0.77%)</title><rect x="507.4" y="389" width="9.1" height="15.0" fill="rgb(214,35,37)" rx="2" ry="2" />
<text  x="510.37" y="399.5" ></text>
</g>
<g >
<title>clear_page_rep (44,574,323 samples, 0.77%)</title><rect x="507.4" y="373" width="9.1" height="15.0" fill="rgb(229,226,47)" rx="2" ry="2" />
<text  x="510.37" y="383.5" ></text>
</g>
<g >
<title>rcmd_af (17,152,515 samples, 0.30%)</title><rect x="10.0" y="805" width="3.5" height="15.0" fill="rgb(223,101,35)" rx="2" ry="2" />
<text  x="13.01" y="815.5" ></text>
</g>
<g >
<title>Py_BytesMain (5,658,898,153 samples, 98.19%)</title><rect x="13.5" y="805" width="1158.7" height="15.0" fill="rgb(231,54,8)" rx="2" ry="2" />
<text  x="16.52" y="815.5" >Py_BytesMain</text>
</g>
<g >
<title>set_vectorcall (1,478,685,313 samples, 25.66%)</title><rect x="808.1" y="629" width="302.8" height="15.0" fill="rgb(233,75,44)" rx="2" ry="2" />
<text  x="811.14" y="639.5" >set_vectorcall</text>
</g>
<g >
<title>__handle_mm_fault (43,533,854 samples, 0.76%)</title><rect x="563.2" y="533" width="9.0" height="15.0" fill="rgb(222,219,9)" rx="2" ry="2" />
<text  x="566.24" y="543.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (43,711,352 samples, 0.76%)</title><rect x="272.5" y="533" width="9.0" height="15.0" fill="rgb(207,223,46)" rx="2" ry="2" />
<text  x="275.53" y="543.5" ></text>
</g>
<g >
<title>lock_page_memcg (43,600,522 samples, 0.76%)</title><rect x="281.5" y="453" width="8.9" height="15.0" fill="rgb(217,40,28)" rx="2" ry="2" />
<text  x="284.48" y="463.5" ></text>
</g>
<g >
<title>py::&lt;module&gt;:/home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/perf_py_proj/after.py (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="677" width="881.8" height="15.0" fill="rgb(226,179,17)" rx="2" ry="2" />
<text  x="293.41" y="687.5" >py::&lt;module&gt;:/home/pete/go/src/github.com/peter-mcconnell/petermcconnell.com/assets/dummy/perf_py_proj/after.py</text>
</g>
<g >
<title>_textiowrapper_writeflush (350,250,129 samples, 6.08%)</title><rect x="707.6" y="501" width="71.7" height="15.0" fill="rgb(245,4,39)" rx="2" ry="2" />
<text  x="710.60" y="511.5" >_textiow..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17,152,515 samples, 0.30%)</title><rect x="10.0" y="789" width="3.5" height="15.0" fill="rgb(244,150,18)" rx="2" ry="2" />
<text  x="13.01" y="799.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (343,913,127 samples, 5.97%)</title><rect x="637.2" y="341" width="70.4" height="15.0" fill="rgb(223,177,53)" rx="2" ry="2" />
<text  x="640.19" y="351.5" >entry_S..</text>
</g>
<g >
<title>Py_FinalizeEx (1,352,323,444 samples, 23.46%)</title><rect x="13.5" y="773" width="276.9" height="15.0" fill="rgb(229,214,4)" rx="2" ry="2" />
<text  x="16.52" y="783.5" >Py_FinalizeEx</text>
</g>
<g >
<title>_io_BufferedWriter_write (308,712,121 samples, 5.36%)</title><rect x="707.6" y="453" width="63.2" height="15.0" fill="rgb(235,53,43)" rx="2" ry="2" />
<text  x="710.60" y="463.5" >_io_Bu..</text>
</g>
<g >
<title>__alloc_pages (44,574,323 samples, 0.77%)</title><rect x="507.4" y="405" width="9.1" height="15.0" fill="rgb(252,130,42)" rx="2" ry="2" />
<text  x="510.37" y="415.5" ></text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (1,376,061,848 samples, 23.88%)</title><rect x="290.4" y="613" width="281.8" height="15.0" fill="rgb(211,8,1)" rx="2" ry="2" />
<text  x="293.41" y="623.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>_io_TextIOWrapper_write (837,863,435 samples, 14.54%)</title><rect x="607.8" y="517" width="171.5" height="15.0" fill="rgb(235,207,20)" rx="2" ry="2" />
<text  x="610.76" y="527.5" >_io_TextIOWrapper_write</text>
</g>
<g >
<title>stop_this_handle (17,152,515 samples, 0.30%)</title><rect x="10.0" y="549" width="3.5" height="15.0" fill="rgb(238,84,25)" rx="2" ry="2" />
<text  x="13.01" y="559.5" ></text>
</g>
<g >
<title>PyObject_Hash (43,635,354 samples, 0.76%)</title><rect x="808.1" y="613" width="9.0" height="15.0" fill="rgb(244,134,47)" rx="2" ry="2" />
<text  x="811.14" y="623.5" ></text>
</g>
<g >
<title>wake_up_process (49,638,246 samples, 0.86%)</title><rect x="689.0" y="85" width="10.2" height="15.0" fill="rgb(206,86,9)" rx="2" ry="2" />
<text  x="692.04" y="95.5" ></text>
</g>
<g >
<title>vfs_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="277" width="70.4" height="15.0" fill="rgb(226,217,25)" rx="2" ry="2" />
<text  x="640.19" y="287.5" >vfs_write</text>
</g>
<g >
<title>do_syscall_64 (17,152,515 samples, 0.30%)</title><rect x="10.0" y="773" width="3.5" height="15.0" fill="rgb(223,3,24)" rx="2" ry="2" />
<text  x="13.01" y="783.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (40,997,807 samples, 0.71%)</title><rect x="699.2" y="149" width="8.4" height="15.0" fill="rgb(207,177,17)" rx="2" ry="2" />
<text  x="702.21" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (43,467,669 samples, 0.75%)</title><rect x="525.4" y="405" width="8.9" height="15.0" fill="rgb(245,119,46)" rx="2" ry="2" />
<text  x="528.40" y="415.5" ></text>
</g>
<g >
<title>_bufferedwriter_flush_unlocked (444,834,933 samples, 7.72%)</title><rect x="616.5" y="437" width="91.1" height="15.0" fill="rgb(238,214,15)" rx="2" ry="2" />
<text  x="619.52" y="447.5" >_bufferedw..</text>
</g>
<g >
<title>_io_FileIO_write (444,834,933 samples, 7.72%)</title><rect x="616.5" y="373" width="91.1" height="15.0" fill="rgb(246,49,49)" rx="2" ry="2" />
<text  x="619.52" y="383.5" >_io_FileIO..</text>
</g>
<g >
<title>_PyRun_SimpleFileObject (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="757" width="881.8" height="15.0" fill="rgb(217,184,47)" rx="2" ry="2" />
<text  x="293.41" y="767.5" >_PyRun_SimpleFileObject</text>
</g>
<g >
<title>_PyLong_AssignValue (793,993,882 samples, 13.78%)</title><rect x="390.4" y="597" width="162.6" height="15.0" fill="rgb(206,130,38)" rx="2" ry="2" />
<text  x="393.44" y="607.5" >_PyLong_AssignValue</text>
</g>
<g >
<title>asm_exc_page_fault (93,509,239 samples, 1.62%)</title><rect x="553.0" y="597" width="19.2" height="15.0" fill="rgb(245,63,21)" rx="2" ry="2" />
<text  x="556.01" y="607.5" ></text>
</g>
<g >
<title>buffered_flush (444,834,933 samples, 7.72%)</title><rect x="616.5" y="469" width="91.1" height="15.0" fill="rgb(243,85,30)" rx="2" ry="2" />
<text  x="619.52" y="479.5" >buffered_f..</text>
</g>
<g >
<title>_PyRun_AnyFileObject (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="773" width="881.8" height="15.0" fill="rgb(254,137,54)" rx="2" ry="2" />
<text  x="293.41" y="783.5" >_PyRun_AnyFileObject</text>
</g>
<g >
<title>mutex_lock (165,750,929 samples, 2.88%)</title><rect x="645.9" y="181" width="33.9" height="15.0" fill="rgb(251,22,4)" rx="2" ry="2" />
<text  x="648.88" y="191.5" >mu..</text>
</g>
<g >
<title>insert_work (49,638,246 samples, 0.86%)</title><rect x="689.0" y="101" width="10.2" height="15.0" fill="rgb(225,58,23)" rx="2" ry="2" />
<text  x="692.04" y="111.5" ></text>
</g>
<g >
<title>pty_write (94,715,288 samples, 1.64%)</title><rect x="679.8" y="165" width="19.4" height="15.0" fill="rgb(222,182,2)" rx="2" ry="2" />
<text  x="682.81" y="175.5" ></text>
</g>
<g >
<title>do_user_addr_fault (134,839,945 samples, 2.34%)</title><rect x="516.5" y="517" width="27.6" height="15.0" fill="rgb(207,28,2)" rx="2" ry="2" />
<text  x="519.49" y="527.5" >d..</text>
</g>
<g >
<title>PyObject_Free (174,731,729 samples, 3.03%)</title><rect x="236.8" y="661" width="35.7" height="15.0" fill="rgb(248,177,34)" rx="2" ry="2" />
<text  x="239.75" y="671.5" >PyO..</text>
</g>
<g >
<title>get_page_from_freelist (261,466,681 samples, 4.54%)</title><rect x="924.1" y="453" width="53.6" height="15.0" fill="rgb(210,121,46)" rx="2" ry="2" />
<text  x="927.13" y="463.5" >get_p..</text>
</g>
<g >
<title>gc_collect_with_callback (435,193,207 samples, 7.55%)</title><rect x="13.5" y="741" width="89.1" height="15.0" fill="rgb(240,174,20)" rx="2" ry="2" />
<text  x="16.52" y="751.5" >gc_collect..</text>
</g>
<g >
<title>unmap_vmas (43,600,522 samples, 0.76%)</title><rect x="281.5" y="549" width="8.9" height="15.0" fill="rgb(222,157,45)" rx="2" ry="2" />
<text  x="284.48" y="559.5" ></text>
</g>
<g >
<title>PyGC_Collect (435,193,207 samples, 7.55%)</title><rect x="13.5" y="757" width="89.1" height="15.0" fill="rgb(251,204,38)" rx="2" ry="2" />
<text  x="16.52" y="767.5" >PyGC_Collect</text>
</g>
<g >
<title>__queue_work (49,638,246 samples, 0.86%)</title><rect x="689.0" y="117" width="10.2" height="15.0" fill="rgb(246,196,54)" rx="2" ry="2" />
<text  x="692.04" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (343,913,127 samples, 5.97%)</title><rect x="637.2" y="325" width="70.4" height="15.0" fill="rgb(227,171,6)" rx="2" ry="2" />
<text  x="640.19" y="335.5" >do_sysc..</text>
</g>
<g >
<title>zap_pte_range (43,600,522 samples, 0.76%)</title><rect x="281.5" y="485" width="8.9" height="15.0" fill="rgb(233,32,15)" rx="2" ry="2" />
<text  x="284.48" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="309" width="70.4" height="15.0" fill="rgb(237,171,44)" rx="2" ry="2" />
<text  x="640.19" y="319.5" >__x64_s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="805" width="17.8" height="15.0" fill="rgb(250,204,32)" rx="2" ry="2" />
<text  x="1175.17" y="815.5" ></text>
</g>
<g >
<title>alloc_pages_vma (304,999,833 samples, 5.29%)</title><rect x="924.1" y="485" width="62.5" height="15.0" fill="rgb(253,34,1)" rx="2" ry="2" />
<text  x="927.13" y="495.5" >alloc_..</text>
</g>
<g >
<title>__alloc_pages (43,533,854 samples, 0.76%)</title><rect x="563.2" y="469" width="9.0" height="15.0" fill="rgb(244,27,37)" rx="2" ry="2" />
<text  x="566.24" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="789" width="17.8" height="15.0" fill="rgb(238,165,34)" rx="2" ry="2" />
<text  x="1175.17" y="799.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (86,891,890 samples, 1.51%)</title><rect x="986.6" y="437" width="17.8" height="15.0" fill="rgb(243,181,40)" rx="2" ry="2" />
<text  x="989.58" y="447.5" ></text>
</g>
<g >
<title>list_dealloc (305,719,069 samples, 5.30%)</title><rect x="227.8" y="677" width="62.6" height="15.0" fill="rgb(224,210,0)" rx="2" ry="2" />
<text  x="230.81" y="687.5" >list_d..</text>
</g>
<g >
<title>dict_tp_clear (523,938,727 samples, 9.09%)</title><rect x="183.1" y="709" width="107.3" height="15.0" fill="rgb(222,126,14)" rx="2" ry="2" />
<text  x="186.13" y="719.5" >dict_tp_clear</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (43,711,352 samples, 0.76%)</title><rect x="272.5" y="501" width="9.0" height="15.0" fill="rgb(252,142,53)" rx="2" ry="2" />
<text  x="275.53" y="511.5" ></text>
</g>
<g >
<title>unmap_region (87,311,874 samples, 1.51%)</title><rect x="272.5" y="565" width="17.9" height="15.0" fill="rgb(215,83,25)" rx="2" ry="2" />
<text  x="275.53" y="575.5" ></text>
</g>
<g >
<title>python3.12 (5,763,165,487 samples, 100.00%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(250,150,45)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >python3.12</text>
</g>
<g >
<title>tlb_finish_mmu (43,711,352 samples, 0.76%)</title><rect x="272.5" y="549" width="9.0" height="15.0" fill="rgb(250,98,28)" rx="2" ry="2" />
<text  x="275.53" y="559.5" ></text>
</g>
<g >
<title>_PyObject_GenericGetAttrWithDict (88,067,807 samples, 1.53%)</title><rect x="779.3" y="533" width="18.0" height="15.0" fill="rgb(220,206,47)" rx="2" ry="2" />
<text  x="782.31" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,001,723,405 samples, 17.38%)</title><rect x="817.1" y="613" width="205.1" height="15.0" fill="rgb(254,204,1)" rx="2" ry="2" />
<text  x="820.07" y="623.5" >[libc.so.6]</text>
</g>
<g >
<title>exc_page_fault (43,533,854 samples, 0.76%)</title><rect x="563.2" y="581" width="9.0" height="15.0" fill="rgb(209,19,9)" rx="2" ry="2" />
<text  x="566.24" y="591.5" ></text>
</g>
<g >
<title>unmap_page_range (43,600,522 samples, 0.76%)</title><rect x="281.5" y="517" width="8.9" height="15.0" fill="rgb(218,51,22)" rx="2" ry="2" />
<text  x="284.48" y="527.5" ></text>
</g>
<g >
<title>Py_RunMain (5,658,898,153 samples, 98.19%)</title><rect x="13.5" y="789" width="1158.7" height="15.0" fill="rgb(213,128,51)" rx="2" ry="2" />
<text  x="16.52" y="799.5" >Py_RunMain</text>
</g>
<g >
<title>visit_decref (262,121,999 samples, 4.55%)</title><rect x="129.5" y="693" width="53.6" height="15.0" fill="rgb(239,19,0)" rx="2" ry="2" />
<text  x="132.46" y="703.5" >visit..</text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (86,891,890 samples, 1.51%)</title><rect x="986.6" y="485" width="17.8" height="15.0" fill="rgb(239,214,42)" rx="2" ry="2" />
<text  x="989.58" y="495.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (43,481,873 samples, 0.75%)</title><rect x="1181.1" y="613" width="8.9" height="15.0" fill="rgb(220,143,17)" rx="2" ry="2" />
<text  x="1184.10" y="623.5" ></text>
</g>
<g >
<title>PyFile_WriteObject (87,594,374 samples, 1.52%)</title><rect x="581.1" y="581" width="17.9" height="15.0" fill="rgb(227,14,2)" rx="2" ry="2" />
<text  x="584.07" y="591.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (86,891,890 samples, 1.51%)</title><rect x="986.6" y="453" width="17.8" height="15.0" fill="rgb(231,5,3)" rx="2" ry="2" />
<text  x="989.58" y="463.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (17,152,515 samples, 0.30%)</title><rect x="10.0" y="517" width="3.5" height="15.0" fill="rgb(253,207,18)" rx="2" ry="2" />
<text  x="13.01" y="527.5" ></text>
</g>
<g >
<title>__vstrfmon_l_internal (5,658,898,153 samples, 98.19%)</title><rect x="13.5" y="821" width="1158.7" height="15.0" fill="rgb(216,125,46)" rx="2" ry="2" />
<text  x="16.52" y="831.5" >__vstrfmon_l_internal</text>
</g>
<g >
<title>PyObject_VectorcallMethod (308,712,121 samples, 5.36%)</title><rect x="707.6" y="485" width="63.2" height="15.0" fill="rgb(252,112,21)" rx="2" ry="2" />
<text  x="710.60" y="495.5" >PyObje..</text>
</g>
<g >
<title>_PyObject_GenericGetAttrWithDict (87,594,374 samples, 1.52%)</title><rect x="581.1" y="549" width="17.9" height="15.0" fill="rgb(208,183,5)" rx="2" ry="2" />
<text  x="584.07" y="559.5" ></text>
</g>
<g >
<title>PyThread_acquire_lock (308,712,121 samples, 5.36%)</title><rect x="707.6" y="437" width="63.2" height="15.0" fill="rgb(223,220,14)" rx="2" ry="2" />
<text  x="710.60" y="447.5" >PyThre..</text>
</g>
<g >
<title>PyObject_Malloc (574,939,502 samples, 9.98%)</title><rect x="435.3" y="565" width="117.7" height="15.0" fill="rgb(248,36,47)" rx="2" ry="2" />
<text  x="438.29" y="575.5" >PyObject_Malloc</text>
</g>
<g >
<title>new_sync_write (17,152,515 samples, 0.30%)</title><rect x="10.0" y="709" width="3.5" height="15.0" fill="rgb(228,112,24)" rx="2" ry="2" />
<text  x="13.01" y="719.5" ></text>
</g>
<g >
<title>should_fail_alloc_page (43,533,152 samples, 0.76%)</title><rect x="977.7" y="469" width="8.9" height="15.0" fill="rgb(219,75,48)" rx="2" ry="2" />
<text  x="980.66" y="479.5" ></text>
</g>
<g >
<title>get_page_from_freelist (43,533,854 samples, 0.76%)</title><rect x="563.2" y="453" width="9.0" height="15.0" fill="rgb(222,56,13)" rx="2" ry="2" />
<text  x="566.24" y="463.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (43,480,344 samples, 0.75%)</title><rect x="1004.4" y="533" width="8.9" height="15.0" fill="rgb(240,61,19)" rx="2" ry="2" />
<text  x="1007.37" y="543.5" ></text>
</g>
<g >
<title>list_dealloc (41,538,008 samples, 0.72%)</title><rect x="770.8" y="485" width="8.5" height="15.0" fill="rgb(240,167,50)" rx="2" ry="2" />
<text  x="773.81" y="495.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (17,152,515 samples, 0.30%)</title><rect x="10.0" y="677" width="3.5" height="15.0" fill="rgb(220,64,38)" rx="2" ry="2" />
<text  x="13.01" y="687.5" ></text>
</g>
<g >
<title>__wake_up (17,152,515 samples, 0.30%)</title><rect x="10.0" y="533" width="3.5" height="15.0" fill="rgb(225,117,4)" rx="2" ry="2" />
<text  x="13.01" y="543.5" ></text>
</g>
<g >
<title>zap_pte_range (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="645" width="17.8" height="15.0" fill="rgb(219,8,6)" rx="2" ry="2" />
<text  x="1175.17" y="655.5" ></text>
</g>
<g >
<title>do_anonymous_page (88,897,466 samples, 1.54%)</title><rect x="498.3" y="437" width="18.2" height="15.0" fill="rgb(218,150,28)" rx="2" ry="2" />
<text  x="501.29" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (87,311,874 samples, 1.51%)</title><rect x="272.5" y="613" width="17.9" height="15.0" fill="rgb(211,91,39)" rx="2" ry="2" />
<text  x="275.53" y="623.5" ></text>
</g>
<g >
<title>PyObject_GetAttr (88,067,807 samples, 1.53%)</title><rect x="779.3" y="549" width="18.0" height="15.0" fill="rgb(251,55,28)" rx="2" ry="2" />
<text  x="782.31" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (45,077,042 samples, 0.78%)</title><rect x="679.8" y="133" width="9.2" height="15.0" fill="rgb(235,152,50)" rx="2" ry="2" />
<text  x="682.81" y="143.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (43,481,873 samples, 0.75%)</title><rect x="1181.1" y="629" width="8.9" height="15.0" fill="rgb(229,108,50)" rx="2" ry="2" />
<text  x="1184.10" y="639.5" ></text>
</g>
<g >
<title>try_charge_memcg (43,465,334 samples, 0.75%)</title><rect x="906.3" y="453" width="8.9" height="15.0" fill="rgb(210,82,5)" rx="2" ry="2" />
<text  x="909.32" y="463.5" ></text>
</g>
<g >
<title>cfunction_vectorcall_O (880,636,974 samples, 15.28%)</title><rect x="599.0" y="533" width="180.3" height="15.0" fill="rgb(230,62,33)" rx="2" ry="2" />
<text  x="602.01" y="543.5" >cfunction_vectorcall_O</text>
</g>
<g >
<title>handle_mm_fault (43,533,854 samples, 0.76%)</title><rect x="563.2" y="549" width="9.0" height="15.0" fill="rgb(210,92,1)" rx="2" ry="2" />
<text  x="566.24" y="559.5" ></text>
</g>
<g >
<title>listiter_next (43,720,697 samples, 0.76%)</title><rect x="1101.9" y="597" width="9.0" height="15.0" fill="rgb(223,146,50)" rx="2" ry="2" />
<text  x="1104.94" y="607.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="533" width="18.2" height="15.0" fill="rgb(239,168,34)" rx="2" ry="2" />
<text  x="501.29" y="543.5" ></text>
</g>
<g >
<title>deduce_unreachable (393,191,510 samples, 6.82%)</title><rect x="102.6" y="709" width="80.5" height="15.0" fill="rgb(211,59,54)" rx="2" ry="2" />
<text  x="105.63" y="719.5" >deduce_un..</text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (1,108,994,214 samples, 19.24%)</title><rect x="581.1" y="613" width="227.0" height="15.0" fill="rgb(233,70,35)" rx="2" ry="2" />
<text  x="584.07" y="623.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>__do_munmap (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="741" width="17.8" height="15.0" fill="rgb(230,48,11)" rx="2" ry="2" />
<text  x="1175.17" y="751.5" ></text>
</g>
<g >
<title>try_to_wake_up (49,638,246 samples, 0.86%)</title><rect x="689.0" y="69" width="10.2" height="15.0" fill="rgb(211,42,3)" rx="2" ry="2" />
<text  x="692.04" y="79.5" ></text>
</g>
<g >
<title>__x86_return_thunk (43,504,061 samples, 0.75%)</title><rect x="817.1" y="597" width="8.9" height="15.0" fill="rgb(214,66,53)" rx="2" ry="2" />
<text  x="820.07" y="607.5" ></text>
</g>
<g >
<title>handle_pte_fault (43,533,854 samples, 0.76%)</title><rect x="563.2" y="517" width="9.0" height="15.0" fill="rgb(230,61,13)" rx="2" ry="2" />
<text  x="566.24" y="527.5" ></text>
</g>
<g >
<title>page_remove_rmap (43,600,522 samples, 0.76%)</title><rect x="281.5" y="469" width="8.9" height="15.0" fill="rgb(225,201,35)" rx="2" ry="2" />
<text  x="284.48" y="479.5" ></text>
</g>
<g >
<title>do_tty_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="213" width="70.4" height="15.0" fill="rgb(241,201,37)" rx="2" ry="2" />
<text  x="640.19" y="223.5" >do_tty_..</text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (94,715,288 samples, 1.64%)</title><rect x="679.8" y="149" width="19.4" height="15.0" fill="rgb(214,88,7)" rx="2" ry="2" />
<text  x="682.81" y="159.5" ></text>
</g>
<g >
<title>new_sync_write (343,913,127 samples, 5.97%)</title><rect x="637.2" y="261" width="70.4" height="15.0" fill="rgb(209,98,54)" rx="2" ry="2" />
<text  x="640.19" y="271.5" >new_syn..</text>
</g>
<g >
<title>list_traverse (131,069,511 samples, 2.27%)</title><rect x="102.6" y="693" width="26.9" height="15.0" fill="rgb(224,219,51)" rx="2" ry="2" />
<text  x="105.63" y="703.5" >l..</text>
</g>
<g >
<title>__schedule (53,712,636 samples, 0.93%)</title><rect x="668.8" y="149" width="11.0" height="15.0" fill="rgb(230,199,51)" rx="2" ry="2" />
<text  x="671.82" y="159.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (43,480,344 samples, 0.75%)</title><rect x="1004.4" y="549" width="8.9" height="15.0" fill="rgb(207,91,6)" rx="2" ry="2" />
<text  x="1007.37" y="559.5" ></text>
</g>
<g >
<title>do_output_char (42,449,103 samples, 0.74%)</title><rect x="637.2" y="181" width="8.7" height="15.0" fill="rgb(245,219,33)" rx="2" ry="2" />
<text  x="640.19" y="191.5" ></text>
</g>
<g >
<title>run_mod (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="725" width="881.8" height="15.0" fill="rgb(228,103,18)" rx="2" ry="2" />
<text  x="293.41" y="735.5" >run_mod</text>
</g>
<g >
<title>_bufferedwriter_raw_write (444,834,933 samples, 7.72%)</title><rect x="616.5" y="421" width="91.1" height="15.0" fill="rgb(226,99,49)" rx="2" ry="2" />
<text  x="619.52" y="431.5" >_bufferedw..</text>
</g>
<g >
<title>PyEval_EvalCode (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="693" width="881.8" height="15.0" fill="rgb(213,60,53)" rx="2" ry="2" />
<text  x="293.41" y="703.5" >PyEval_EvalCode</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (43,501,886 samples, 0.75%)</title><rect x="544.1" y="501" width="8.9" height="15.0" fill="rgb(243,25,41)" rx="2" ry="2" />
<text  x="547.10" y="511.5" ></text>
</g>
<g >
<title>__entry_text_start (42,147,322 samples, 0.73%)</title><rect x="628.6" y="341" width="8.6" height="15.0" fill="rgb(213,212,19)" rx="2" ry="2" />
<text  x="631.56" y="351.5" ></text>
</g>
<g >
<title>rmqueue_bulk (43,527,043 samples, 0.76%)</title><rect x="968.7" y="421" width="9.0" height="15.0" fill="rgb(234,205,53)" rx="2" ry="2" />
<text  x="971.75" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (40,997,807 samples, 0.71%)</title><rect x="699.2" y="165" width="8.4" height="15.0" fill="rgb(236,29,45)" rx="2" ry="2" />
<text  x="702.21" y="175.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (42,449,103 samples, 0.74%)</title><rect x="637.2" y="149" width="8.7" height="15.0" fill="rgb(241,40,33)" rx="2" ry="2" />
<text  x="640.19" y="159.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (49,638,246 samples, 0.86%)</title><rect x="689.0" y="53" width="10.2" height="15.0" fill="rgb(229,123,47)" rx="2" ry="2" />
<text  x="692.04" y="63.5" ></text>
</g>
<g >
<title>exc_page_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="517" width="18.2" height="15.0" fill="rgb(239,139,1)" rx="2" ry="2" />
<text  x="501.29" y="527.5" ></text>
</g>
<g >
<title>__handle_mm_fault (134,839,945 samples, 2.34%)</title><rect x="516.5" y="485" width="27.6" height="15.0" fill="rgb(220,89,30)" rx="2" ry="2" />
<text  x="519.49" y="495.5" >_..</text>
</g>
<g >
<title>__cond_resched (53,712,636 samples, 0.93%)</title><rect x="668.8" y="165" width="11.0" height="15.0" fill="rgb(246,71,54)" rx="2" ry="2" />
<text  x="671.82" y="175.5" ></text>
</g>
<g >
<title>gc_collect_main (435,193,207 samples, 7.55%)</title><rect x="13.5" y="725" width="89.1" height="15.0" fill="rgb(223,191,8)" rx="2" ry="2" />
<text  x="16.52" y="735.5" >gc_collect..</text>
</g>
<g >
<title>asm_exc_page_fault (914,737,357 samples, 15.87%)</title><rect x="826.0" y="597" width="187.3" height="15.0" fill="rgb(247,169,12)" rx="2" ry="2" />
<text  x="828.98" y="607.5" >asm_exc_page_fault</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (43,600,522 samples, 0.76%)</title><rect x="281.5" y="501" width="8.9" height="15.0" fill="rgb(239,172,7)" rx="2" ry="2" />
<text  x="284.48" y="511.5" ></text>
</g>
<g >
<title>handle_pte_fault (88,897,466 samples, 1.54%)</title><rect x="498.3" y="453" width="18.2" height="15.0" fill="rgb(233,118,35)" rx="2" ry="2" />
<text  x="501.29" y="463.5" ></text>
</g>
<g >
<title>clear_page_rep (43,533,854 samples, 0.76%)</title><rect x="563.2" y="437" width="9.0" height="15.0" fill="rgb(240,24,30)" rx="2" ry="2" />
<text  x="566.24" y="447.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (17,152,515 samples, 0.30%)</title><rect x="10.0" y="581" width="3.5" height="15.0" fill="rgb(244,57,34)" rx="2" ry="2" />
<text  x="13.01" y="591.5" ></text>
</g>
<g >
<title>handle_mm_fault (134,839,945 samples, 2.34%)</title><rect x="516.5" y="501" width="27.6" height="15.0" fill="rgb(214,138,11)" rx="2" ry="2" />
<text  x="519.49" y="511.5" >h..</text>
</g>
<g >
<title>pyrun_file (4,306,574,709 samples, 74.73%)</title><rect x="290.4" y="741" width="881.8" height="15.0" fill="rgb(238,195,10)" rx="2" ry="2" />
<text  x="293.41" y="751.5" >pyrun_file</text>
</g>
<g >
<title>do_syscall_64 (87,311,874 samples, 1.51%)</title><rect x="272.5" y="629" width="17.9" height="15.0" fill="rgb(232,106,42)" rx="2" ry="2" />
<text  x="275.53" y="639.5" ></text>
</g>
<g >
<title>PyObject_VectorcallMethod (444,834,933 samples, 7.72%)</title><rect x="616.5" y="501" width="91.1" height="15.0" fill="rgb(241,176,9)" rx="2" ry="2" />
<text  x="619.52" y="511.5" >PyObject_V..</text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (87,072,580 samples, 1.51%)</title><rect x="1172.2" y="821" width="17.8" height="15.0" fill="rgb(211,43,42)" rx="2" ry="2" />
<text  x="1175.17" y="831.5" ></text>
</g>
<g >
<title>__do_munmap (87,311,874 samples, 1.51%)</title><rect x="272.5" y="581" width="17.9" height="15.0" fill="rgb(243,78,2)" rx="2" ry="2" />
<text  x="275.53" y="591.5" ></text>
</g>
<g >
<title>release_pages (43,481,873 samples, 0.75%)</title><rect x="1181.1" y="597" width="8.9" height="15.0" fill="rgb(221,16,8)" rx="2" ry="2" />
<text  x="1184.10" y="607.5" ></text>
</g>
<g >
<title>memcg_check_events (43,508,776 samples, 0.75%)</title><rect x="915.2" y="469" width="8.9" height="15.0" fill="rgb(217,54,45)" rx="2" ry="2" />
<text  x="918.22" y="479.5" ></text>
</g>
<g >
<title>PyObject_Vectorcall (4,007,292,589 samples, 69.53%)</title><rect x="290.4" y="645" width="820.5" height="15.0" fill="rgb(234,9,3)" rx="2" ry="2" />
<text  x="293.41" y="655.5" >PyObject_Vectorcall</text>
</g>
<g >
<title>visit_reachable (174,367,870 samples, 3.03%)</title><rect x="66.9" y="693" width="35.7" height="15.0" fill="rgb(244,39,23)" rx="2" ry="2" />
<text  x="69.92" y="703.5" >vis..</text>
</g>
<g >
<title>_Py_Dealloc (43,720,330 samples, 0.76%)</title><rect x="218.9" y="677" width="8.9" height="15.0" fill="rgb(223,56,42)" rx="2" ry="2" />
<text  x="221.86" y="687.5" ></text>
</g>
<g >
<title>unmap_single_vma (43,600,522 samples, 0.76%)</title><rect x="281.5" y="533" width="8.9" height="15.0" fill="rgb(208,220,11)" rx="2" ry="2" />
<text  x="284.48" y="543.5" ></text>
</g>
<g >
<title>PyFile_WriteString (1,021,399,840 samples, 17.72%)</title><rect x="599.0" y="581" width="209.1" height="15.0" fill="rgb(237,182,20)" rx="2" ry="2" />
<text  x="602.01" y="591.5" >PyFile_WriteString</text>
</g>
<g >
<title>finalize_modules (917,130,237 samples, 15.91%)</title><rect x="102.6" y="757" width="187.8" height="15.0" fill="rgb(246,224,0)" rx="2" ry="2" />
<text  x="105.63" y="767.5" >finalize_modules</text>
</g>
<g >
<title>irqentry_exit (43,501,886 samples, 0.75%)</title><rect x="544.1" y="517" width="8.9" height="15.0" fill="rgb(221,49,3)" rx="2" ry="2" />
<text  x="547.10" y="527.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (17,152,515 samples, 0.30%)</title><rect x="10.0" y="613" width="3.5" height="15.0" fill="rgb(221,149,36)" rx="2" ry="2" />
<text  x="13.01" y="623.5" ></text>
</g>
<g >
<title>buffered_flush_and_rewind_unlocked (444,834,933 samples, 7.72%)</title><rect x="616.5" y="453" width="91.1" height="15.0" fill="rgb(206,85,45)" rx="2" ry="2" />
<text  x="619.52" y="463.5" >buffered_f..</text>
</g>
<g >
<title>_PyLong_AssignValue (43,551,214 samples, 0.76%)</title><rect x="572.2" y="613" width="8.9" height="15.0" fill="rgb(224,188,7)" rx="2" ry="2" />
<text  x="575.15" y="623.5" ></text>
</g>
<g >
<title>builtin_print (1,108,994,214 samples, 19.24%)</title><rect x="581.1" y="597" width="227.0" height="15.0" fill="rgb(218,214,42)" rx="2" ry="2" />
<text  x="584.07" y="607.5" >builtin_print</text>
</g>
<g >
<title>release_pages (43,711,352 samples, 0.76%)</title><rect x="272.5" y="517" width="9.0" height="15.0" fill="rgb(229,35,28)" rx="2" ry="2" />
<text  x="275.53" y="527.5" ></text>
</g>
<g >
<title>ksys_write (17,152,515 samples, 0.30%)</title><rect x="10.0" y="741" width="3.5" height="15.0" fill="rgb(230,88,13)" rx="2" ry="2" />
<text  x="13.01" y="751.5" ></text>
</g>
<g >
<title>visit_decref (173,812,780 samples, 3.02%)</title><rect x="31.3" y="693" width="35.6" height="15.0" fill="rgb(241,39,31)" rx="2" ry="2" />
<text  x="34.34" y="703.5" >vis..</text>
</g>
<g >
<title>error_entry (43,481,987 samples, 0.75%)</title><rect x="1013.3" y="597" width="8.9" height="15.0" fill="rgb(222,13,24)" rx="2" ry="2" />
<text  x="1016.27" y="607.5" ></text>
</g>
<g >
<title>__vm_munmap (87,311,874 samples, 1.51%)</title><rect x="272.5" y="597" width="17.9" height="15.0" fill="rgb(226,179,5)" rx="2" ry="2" />
<text  x="275.53" y="607.5" ></text>
</g>
</g>
</svg>
